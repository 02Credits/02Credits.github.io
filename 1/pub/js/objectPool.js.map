{"version":3,"sources":["objectPool.ts"],"names":[],"mappings":";;;IAAA,eAAkB,EAAK;QACrB,EAAE,CAAC,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAQ,EAAS,CAAC;YAC3B,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAChB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,WAAW,GAAU,EAAE,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,EAAW,CAAC,CAAC,CAAC;gBAC9B,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,WAAuB,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED,cAAiB,MAAS,EAAE,IAAO;QACjC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACd,IAAI,CAAC,EAAE,CAAC,GAAG,EAAS,CAAC;gBACvB,CAAC;gBACD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;;;;;YAED,aAAA;gBAIE,YAAY,KAAQ;oBAHZ,SAAI,GAAQ,EAAE,CAAC;oBAIrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACrB,CAAC;gBAEM,GAAG;oBACR,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC3B,CAAC;gBACH,CAAC;gBAEM,IAAI,CAAC,GAAM;oBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtB,CAAC;aACF,CAAA;;QACD,CAAC","file":"objectPool.js","sourcesContent":["function clone<T>(el: T): T {\r\n  if (typeof el == \"object\") {\r\n    let newEl: any = {} as any;\r\n    copy(el, newEl);\r\n    return newEl;\r\n  } else if (Array.isArray(el)) {\r\n    let returnArray: any[] = [];\r\n    for (let child of el as any[]) {\r\n      returnArray.push(clone(child));\r\n    }\r\n    return returnArray as any as T;\r\n  } else {\r\n    return el;\r\n  }\r\n}\r\n\r\nfunction copy<T>(source: T, dest: T) {\r\n  for (let id in source) {\r\n    if (typeof source[id] == \"object\") {\r\n      if (!dest[id]) {\r\n        dest[id] = {} as any;\r\n      }\r\n      copy(source[id], dest[id]);\r\n    } else {\r\n      dest[id] = clone(source[id]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ObjectPool<T> {\r\n  private pool: T[] = [];\r\n  private proto: T;\r\n\r\n  constructor(proto: T) {\r\n    this.proto = proto;\r\n  }\r\n\r\n  public New(): T {\r\n    if (this.pool.length != 0) {\r\n      return this.pool.pop();\r\n    } else {\r\n      return clone(this.proto);\r\n    }\r\n  }\r\n\r\n  public Free(obj: T) {\r\n    copy(this.proto, obj);\r\n    this.pool.push(obj);\r\n  }\r\n}\r\n"]}