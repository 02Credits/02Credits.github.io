{"version":3,"sources":["objectPool.ts"],"names":[],"mappings":";;;;;;;YACA,aAAA;gBAiCE,YAAY,KAAU;oBAhCd,SAAI,GAAU,EAAE,CAAC;oBAiCvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACrB,CAAC;gBA/BD,MAAM,CAAC,IAAI,CAAC,MAAW,EAAE,IAAS;oBAChC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;4BAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gCACd,IAAI,CAAC,EAAE,CAAC,GAAG,EAAS,CAAC;4BACvB,CAAC;4BACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;wBAClC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpC,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,MAAM,CAAC,KAAK,CAAC,EAAO;oBAClB,EAAE,CAAC,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC;wBAC1B,IAAI,KAAK,GAAQ,EAAS,CAAC;wBAC3B,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;wBACrB,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,WAAW,GAAU,EAAE,CAAC;wBAC5B,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,EAAW,CAAC,CAAC,CAAC;4BAC9B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBACtC,CAAC;wBACD,MAAM,CAAC,WAAW,CAAC;oBACrB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,EAAE,CAAC;oBACZ,CAAC;gBACH,CAAC;gBAMM,GAAG;oBACR,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACtC,CAAC;gBACH,CAAC;gBAEM,IAAI,CAAC,GAAQ;oBAClB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtB,CAAC;aACF,CAAA;;QACD,CAAC","file":"objectPool.js","sourcesContent":["\r\nexport default class ObjectPool {\r\n  private pool: any[] = [];\r\n  private proto: any;\r\n\r\n  static copy(source: any, dest: any) {\r\n    for (let id in source) {\r\n      if (typeof source[id] == \"object\") {\r\n        if (!dest[id]) {\r\n          dest[id] = {} as any;\r\n        }\r\n        this.copy(source[id], dest[id]);\r\n      } else {\r\n        dest[id] = this.clone(source[id]);\r\n      }\r\n    }\r\n  }\r\n\r\n  static clone(el: any): any {\r\n    if (typeof el == \"object\") {\r\n      let newEl: any = {} as any;\r\n      this.copy(el, newEl);\r\n      return newEl;\r\n    } else if (Array.isArray(el)) {\r\n      let returnArray: any[] = [];\r\n      for (let child of el as any[]) {\r\n        returnArray.push(this.clone(child));\r\n      }\r\n      return returnArray;\r\n    } else {\r\n      return el;\r\n    }\r\n  }\r\n\r\n  constructor(proto: any) {\r\n    this.proto = proto;\r\n  }\r\n\r\n  public New(): any {\r\n    if (this.pool.length != 0) {\r\n      return this.pool.pop();\r\n    } else {\r\n      return ObjectPool.clone(this.proto);\r\n    }\r\n  }\r\n\r\n  public Free(obj: any) {\r\n    ObjectPool.copy(this.proto, obj);\r\n    this.pool.push(obj);\r\n  }\r\n}\r\n"]}