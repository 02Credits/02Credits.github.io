{"version":3,"sources":["holeManager.ts"],"names":[],"mappings":";;;IAYA,oBAA2B,MAAsB,IAA8B,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC;;IAO7G,gBAAuB,MAAsB,IAA0B,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;;IAIjG;QACE,4BAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO;YAChD,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACzB,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACpF,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5C,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5G,CAAC;oBAED,IAAI,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;oBACvC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACf,MAAM,GAAG,CAAC,CAAC;oBACb,CAAC;oBAED,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACf,MAAM,GAAG,CAAC,CAAC;oBACb,CAAC;oBAED,EAAE,CAAC,CAAC,2BAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC3B,EAAE,CAAC,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC;4BACxB,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC;wBAC5B,CAAC;wBACD,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC;oBAC1B,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;;;;;;;;;;;;;;;;;;YA9CD,kBAAW,IAAI,GAAG,IAAI,4BAAa,EAAO,EAAC;YAKkE,CAAC;YAOb,CAAC;QAmClG,CAAC","file":"holeManager.js","sourcesContent":["import {Collision, Entity as CollidableEntity} from \"./collisionManager\";\r\nimport {isRenderable} from \"./webglManager\";\r\nimport {EventManager1} from \"./eventManager\";\r\n\r\nimport {CombinedEntity} from \"./entity\";\r\nimport * as utils from \"./utils\";\r\n\r\nexport let Fell = new EventManager1<any>();\r\n\r\ninterface FallableEntity extends CollidableEntity {\r\n  fallable: boolean\r\n}\r\nexport function isFallable(entity: CombinedEntity): entity is FallableEntity { return \"fallable\" in entity; };\r\n\r\ninterface HoleEntity extends CollidableEntity {\r\n  hole: {\r\n    steepness: number\r\n  }\r\n}\r\nexport function isHole(entity: CombinedEntity): entity is HoleEntity { return \"hole\" in entity; };\r\n\r\nexport type Entity = FallableEntity | HoleEntity;\r\n\r\nexport function setup() {\r\n  Collision.Subscribe((fallable, collidable, details) => {\r\n    if (isFallable(fallable)) {\r\n      if (isHole(collidable)) {\r\n        if (details.depth > Math.max(fallable.dimensions.width, fallable.dimensions.height)) {\r\n          fallable.position.x = collidable.position.x;\r\n          fallable.position.y = collidable.position.y;\r\n          Fell.Publish(fallable);\r\n        } else {\r\n          fallable.position = utils.toPoint(utils.scale(details.normal, details.depth * collidable.hole.steepness));\r\n        }\r\n\r\n        var factor = 1.2 - details.depth * 0.2;\r\n        if (factor < 0) {\r\n          factor = 0;\r\n        }\r\n\r\n        if (factor > 1) {\r\n          factor = 1;\r\n        }\r\n\r\n        if (isRenderable(fallable)) {\r\n          if (\"color\" in fallable) {\r\n            fallable.color.a = factor;\r\n          }\r\n          fallable.scale = factor;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n"]}