{"version":3,"sources":["holeManager.ts"],"names":[],"mappings":";;;IAWA,oBAA2B,MAAsB,IAA8B,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC;;IAO7G,gBAAuB,MAAsB,IAA0B,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;;IAIjG;QACI,4BAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO;YAC9C,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAClF,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5C,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC3B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;wBACrF,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;oBACzF,CAAC;oBAED,IAAI,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;oBACvC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACb,MAAM,GAAG,CAAC,CAAC;oBACf,CAAC;oBAED,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACb,MAAM,GAAG,CAAC,CAAC;oBACf,CAAC;oBAED,EAAE,CAAC,CAAC,0BAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACzB,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC;wBACjC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC;oBACrC,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;;;;;;;;;;;;;;;;YA7CD,kBAAW,IAAI,GAAG,IAAI,4BAAa,EAAO,EAAC;YAKkE,CAAC;YAOb,CAAC;QAkClG,CAAC","file":"holeManager.js","sourcesContent":["import {Collision, Entity as CollidableEntity} from \"./collisionManager\";\r\nimport {isRenderable} from \"./pixiManager\";\r\nimport {EventManager1} from \"./eventManager\";\r\n\r\nimport {CombinedEntity} from \"./entity\";\r\n\r\nexport let Fell = new EventManager1<any>();\r\n\r\ninterface FallableEntity extends CollidableEntity {\r\n    fallable: boolean\r\n}\r\nexport function isFallable(entity: CombinedEntity): entity is FallableEntity { return \"fallable\" in entity; };\r\n\r\ninterface HoleEntity extends CollidableEntity {\r\n    hole: {\r\n        steepness: number\r\n    }\r\n}\r\nexport function isHole(entity: CombinedEntity): entity is HoleEntity { return \"hole\" in entity; };\r\n\r\nexport type Entity = FallableEntity | HoleEntity;\r\n\r\nexport function Setup() {\r\n    Collision.Subscribe((fallable, collidable, details) => {\r\n        if (isFallable(fallable)) {\r\n            if (isHole(collidable)) {\r\n                if (details.depth > Math.max(fallable.dimensions.width, fallable.dimensions.height)) {\r\n                    fallable.position.x = collidable.position.x;\r\n                    fallable.position.y = collidable.position.y;\r\n                    Fell.Publish(fallable);\r\n                } else {\r\n                    fallable.position.x += details.normal[0] * details.depth * collidable.hole.steepness;\r\n                    fallable.position.y += details.normal[1] * details.depth * collidable.hole.steepness;\r\n                }\r\n\r\n                var factor = 1.2 - details.depth * 0.2;\r\n                if (factor < 0) {\r\n                    factor = 0;\r\n                }\r\n\r\n                if (factor > 1) {\r\n                    factor = 1;\r\n                }\r\n\r\n                if (isRenderable(fallable)) {\r\n                    fallable.rendered.alpha = factor;\r\n                    fallable.rendered.scale = factor;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n"]}