{"version":3,"sources":["pixiManager.ts"],"names":[],"mappings":";;;;;;YAgCA,0GAA0G;YAE1G,qDAAqD;YACrD,8DAA8D;YAC9D,4CAA4C;YAE5C,uDAAuD;YACvD,wDAAwD;YAExD,8DAA8D;YAE9D,mCAAmC;YACnC,sCAAsC;YAEtC,yBAAyB;YACzB,8CAA8C;YAC9C,wDAAwD;YACxD,mEAAmE;YACnE,QAAQ;YACR,QAAQ;YAER,8CAA8C;YAC9C,wDAAwD;YACxD,qEAAqE;YACrE,QAAQ;YACR,QAAQ;YAER,4CAA4C;YAC5C,kCAAkC;YAClC,wCAAwC;YACxC,kFAAkF;YAClF,8BAA8B;YAC9B,mBAAmB;YACnB,yCAAyC;YACzC,iCAAiC;YACjC,UAAU;YACV,yDAAyD;YACzD,4DAA4D;YAC5D,oDAAoD;YACpD,UAAU;YACV,2CAA2C;YAC3C,4CAA4C;YAC5C,QAAQ;YACR,QAAQ;YAER,6BAA6B;YAC7B,0DAA0D;YAC1D,8BAA8B;YAC9B,QAAQ;YACR,QAAQ;YAER,6BAA6B;YAC7B,+CAA+C;YAC/C,gCAAgC;YAChC,uCAAuC;YACvC,uBAAuB;YACvB,8CAA8C;YAC9C,6CAA6C;YAC7C,UAAU;YACV,kEAAkE;YAClE,mEAAmE;YACnE,qDAAqD;YACrD,sDAAsD;YACtD,QAAQ;YAER,+DAA+D;YAC/D,kCAAkC;YAClC,qBAAqB;YACrB,yCAAyC;YACzC,oBAAoB;YACpB,UAAU;YACV,8BAA8B;YAC9B,iDAAiD;YACjD,0CAA0C;YAC1C,6BAA6B;YAC7B,YAAY;YACZ,0CAA0C;YAC1C,6BAA6B;YAC7B,YAAY;YACZ,UAAU;YACV,+CAA+C;YAC/C,UAAU;YAEV,6BAA6B;YAC7B,QAAQ;YACR,IAAI;YAEJ,yDAAyD;YACzD,8BAA8B;YAC9B,sCAAsC;YACtC,sCAAsC;YACtC,uCAAuC;YAEvC,6BAA6B;YAC7B,6BAA6B;YAE7B,mEAAmE;YACnE,6DAA6D;YAC7D,QAAQ;YAER,iCAAiC;YACjC,uCAAuC;YACvC,QAAQ;YAER,qBAAqB;YACrB,iCAAiC;YACjC,gCAAgC;YAChC,QAAQ;YAER,oCAAoC;YACpC,wDAAwD;YACxD,0DAA0D;YAC1D,eAAe;YACf,8BAA8B;YAC9B,+BAA+B;YAC/B,gCAAgC;YAChC,UAAU;YACV,QAAQ;YAER,kCAAkC;YAClC,2CAA2C;YAC3C,QAAQ;YAER,8BAA8B;YAC9B,uCAAuC;YACvC,QAAQ;YAER,8BAA8B;YAC9B,uCAAuC;YACvC,QAAQ;YACR,MAAM;YACN,IAAI;YAEJ,gCAAgC;YAChC,sEAAsE;YACtE,6CAA6C;YAC7C,8CAA8C;YAC9C,uDAAuD;YACvD,sDAAsD;YACtD,iCAAiC;YACjC,IAAI;YAEJ,wDAAwD;YACxD,oDAAoD;YACpD,iCAAiC;YACjC,oCAAoC;YACpC,4BAA4B;YAE5B,gEAAgE;YAChE,2BAA2B;YAE3B,wCAAwC;YACxC,wBAAwB;YAExB,sCAAsC;YACtC,uCAAuC;YACvC,qGAAqG;YACrG,uJAAuJ;YACvJ,4CAA4C;YAC5C,qEAAqE;YACrE,yBAAyB;YACzB,uBAAuB;YACvB,YAAY;YACZ,YAAY;YACZ,QAAQ;YACR,QAAQ;YACR,IAAI;QACJ,CAAC","file":"pixiManager.js","sourcesContent":["import * as ces from \"./ces\";\r\nimport {Update} from \"./animationManager\";\r\nimport {isCamera} from \"./cameraManager\";\r\n\r\nimport {CombinedEntity} from \"./entity\";\r\n\r\nimport * as pixi from \"pixi.js\";\r\n\r\nexport interface RenderInfo {\r\n  texture: string;\r\n  alpha?: number;\r\n}\r\n\r\nexport interface Position {\r\n  x: number;\r\n  y: number;\r\n  z?: number;\r\n  cx?: number;\r\n  cy?: number;\r\n}\r\n\r\nexport interface Dimensions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface Entity {\r\n  rendered: RenderInfo;\r\n  position: Position;\r\n  dimensions?: Dimensions;\r\n  rotation?: number;\r\n}\r\n// export function isRenderable(entity: CombinedEntity): entity is Entity { return \"rendered\" in entity; }\r\n\r\n// let sprites: { [id: string]: pixi.Sprite }  = { };\r\n// let size = Math.min(window.innerWidth, window.innerHeight);\r\n// export let renderer: pixi.CanvasRenderer;\r\n\r\n// let stages: { [id: string]: pixi.Container } =  { };\r\n// let uiStages: { [id: string]: pixi.Container } = { };\r\n\r\n// let textures: { [id: string]: pixi.loaders.Resource } = {};\r\n\r\n// export let root: pixi.Container;\r\n// export let overlay: pixi.Container;\r\n\r\n// function afterLoad() {\r\n//   ces.EntityRemoved.Subscribe((entity) => {\r\n//     if (isRenderable(entity) && sprites[entity.id]) {\r\n//       stages[entity.position.z].removeChild(sprites[entity.id]);\r\n//     }\r\n//   });\r\n\r\n//   ces.EntityRemoved.Subscribe((entity) => {\r\n//     if (isRenderable(entity) && sprites[entity.id]) {\r\n//       uiStages[entity.position.z].removeChild(sprites[entity.id]);\r\n//     }\r\n//   });\r\n\r\n//   ces.EntityAdded.Subscribe((entity) => {\r\n//     if (isRenderable(entity)) {\r\n//       let rendered = entity.rendered;\r\n//       sprites[entity.id] = new pixi.Sprite(textures[rendered.texture].texture);\r\n//       updateSprite(entity);\r\n//       let stage;\r\n//       if (!(\"z\" in entity.position)) {\r\n//         entity.position.z = 5;\r\n//       }\r\n//       if (!(entity.position.z.toString() in stages)) {\r\n//         stages[entity.position.z] = new pixi.Container();\r\n//         root.addChild(stages[entity.position.z]);\r\n//       }\r\n//       stage = stages[entity.position.z];\r\n//       stage.addChild(sprites[entity.id]);\r\n//     }\r\n//   });\r\n\r\n//   Update.Subscribe(() => {\r\n//     for (let entity of ces.GetEntities(isRenderable)) {\r\n//       updateSprite(entity);\r\n//     }\r\n//   });\r\n\r\n//   Update.Subscribe(() => {\r\n//     let cameras = ces.GetEntities(isCamera);\r\n//     if (cameras.length > 0) {\r\n//       let cameraEntity = cameras[0];\r\n//       let scale = 1;\r\n//       if (\"scale\" in cameraEntity.camera) {\r\n//         scale = cameraEntity.camera.scale;\r\n//       }\r\n//       root.x = -cameraEntity.position.x + (renderer.width / 2);\r\n//       root.y = -cameraEntity.position.y + (renderer.height / 2);\r\n//       root.scale.x = scale * renderer.width / 100;\r\n//       root.scale.y = scale * renderer.height / 100;\r\n//     }\r\n\r\n//     root.children = root.children.sort((stage1, stage2) => {\r\n//       if (stage1 === overlay) {\r\n//         return -1;\r\n//       } else if (stage2 === overlay) {\r\n//         return 1;\r\n//       }\r\n//       let zIndex1, zIndex2;\r\n//       for (let index of Object.keys(stages)) {\r\n//         if (stages[index] === stage1) {\r\n//           zIndex1 = index;\r\n//         }\r\n//         if (stages[index] === stage2) {\r\n//           zIndex2 = index;\r\n//         }\r\n//       }\r\n//       return zIndex1.localeCompare(zIndex2);\r\n//     });\r\n\r\n//     renderer.render(root);\r\n//   });\r\n// }\r\n\r\n// function updateSprite(entity: Entity & {id: string}) {\r\n//   if (sprites[entity.id]) {\r\n//     let rendered = entity.rendered;\r\n//     let position = entity.position;\r\n//     let sprite = sprites[entity.id];\r\n\r\n//     sprite.x = position.x;\r\n//     sprite.y = position.y;\r\n\r\n//     if (sprite.texture !== textures[rendered.texture].texture) {\r\n//       sprite.texture = textures[rendered.texture].texture;\r\n//     }\r\n\r\n//     if (\"alpha\" in rendered) {\r\n//       sprite.alpha = rendered.alpha;\r\n//     }\r\n\r\n//     let scale = 1;\r\n//     if (\"scale\" in rendered) {\r\n//       scale = rendered.scale;\r\n//     }\r\n\r\n//     if (\"dimensions\" in entity) {\r\n//       sprite.width = entity.dimensions.width * scale;\r\n//       sprite.height = entity.dimensions.height * scale;\r\n//     } else {\r\n//       entity.dimensions = {\r\n//         width: sprite.width,\r\n//         height: sprite.height\r\n//       }\r\n//     }\r\n\r\n//     if (\"rotation\" in entity) {\r\n//       sprite.rotation = entity.rotation;\r\n//     }\r\n\r\n//     if (\"cx\" in position) {\r\n//       sprite.anchor.x = position.cx;\r\n//     }\r\n\r\n//     if (\"cy\" in position) {\r\n//       sprite.anchor.y = position.cy;\r\n//     }\r\n//   }\r\n// }\r\n\r\n// function positionRenderer() {\r\n//   let size = Math.min(window.innerWidth, window.innerHeight) - 100;\r\n//   renderer.view.style.width = size + \"px\";\r\n//   renderer.view.style.height = size + \"px\";\r\n//   renderer.view.style.marginLeft = -size / 2 + \"px\";\r\n//   renderer.view.style.marginTop = -size / 2 + \"px\";\r\n//   renderer.resize(size, size);\r\n// }\r\n\r\n// export async function Setup(texturePaths: string[]) {\r\n//   renderer = new pixi.CanvasRenderer(size, size);\r\n//   root = new pixi.Container();\r\n//   overlay = new pixi.Container();\r\n//   root.addChild(overlay);\r\n\r\n//   document.getElementById(\"game\").appendChild(renderer.view);\r\n//   renderer.view.focus();\r\n\r\n//   window.onresize = positionRenderer;\r\n//   positionRenderer();\r\n\r\n//   return new Promise((resolve) => {\r\n//     for (let path of texturePaths) {\r\n//       let location = window.location.href.substring(0, window.location.href.lastIndexOf('/') + 1);\r\n//       pixi.loader.add(path, location + \"assets/\" + path).load((loader: pixi.loaders.Loader, resources: { [id: string]: pixi.loaders.Resource }) => {\r\n//         textures[path] = resources[path];\r\n//         if (Object.keys(textures).length == texturePaths.length) {\r\n//           afterLoad();\r\n//           resolve();\r\n//         }\r\n//       });\r\n//     }\r\n//   });\r\n// }\r\n"]}