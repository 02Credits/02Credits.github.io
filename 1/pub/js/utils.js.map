{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["export module Utils {\r\n    // export function defaultValue<T>(getX: T|(() => T), defaultValue: T) {\r\n    //     try {\r\n    //         let x: T;\r\n    //         if (typeof getX == \"function\") {\r\n    //             x = getX();\r\n    //         } else {\r\n    //             x = getX;\r\n    //         }\r\n    //         if (x != null) {\r\n    //             return x;\r\n    //         } else {\r\n    //             return defaultValue;\r\n    //         }\r\n    //     } catch (e) {\r\n    //         return defaultValue;\r\n    //     }\r\n    // }\r\n\r\n    export function absoluteMin(xs: number[]) {\r\n        let currentMin = xs[0];\r\n        for (let i = 1; i < xs.length; i ++) {\r\n            if (Math.abs(currentMin) > Math.abs(xs[i])) {\r\n                currentMin = xs[i];\r\n            }\r\n        }\r\n        return currentMin;\r\n    }\r\n\r\n    interface CoordObject {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    type CoordArray = number[];\r\n\r\n    type Coords = CoordObject|CoordArray;\r\n\r\n    export function standardizeCoords(coords: Coords) {\r\n        if (Array.isArray(coords)) {\r\n            return {x: coords[0], y: coords[0]};\r\n        } else {\r\n            return coords;\r\n        }\r\n    }\r\n\r\n    export function distance(coords: Coords) {\r\n        let standardCoords = standardizeCoords(coords);\r\n        return Math.sqrt(standardCoords.x * standardCoords.x + standardCoords.y * standardCoords.y);\r\n    }\r\n\r\n    export function sub(coords1: Coords, coords2: Coords) {\r\n        let c1 = standardizeCoords(coords1);\r\n        let c2 = standardizeCoords(coords2);\r\n        return {x: c1.x - c2.x, y: c1.y - c2.y};\r\n    }\r\n\r\n    export function add(coords1: Coords, coords2: Coords) {\r\n        let c1 = standardizeCoords(coords1);\r\n        let c2 = standardizeCoords(coords2);\r\n        return {x: c1.x + c2.x, y: c1.y + c2.y};\r\n    }\r\n\r\n    export function mult(coords: Coords, s: number) {\r\n        let c = standardizeCoords(coords);\r\n        return {x: c.x * s, y: c.y * s};\r\n    }\r\n\r\n    export function div(coords: Coords, s: number) {\r\n        let c = standardizeCoords(coords);\r\n        return {x: c.x / s, y: c.y / s};\r\n    }\r\n}\r\n\r\nexport default Utils;\r\n"]}