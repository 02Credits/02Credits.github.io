{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["export function absoluteMin(xs: number[]) {\r\n  let currentMin = xs[0];\r\n  for (let i = 1; i < xs.length; i ++) {\r\n    if (Math.abs(currentMin) > Math.abs(xs[i])) {\r\n      currentMin = xs[i];\r\n    }\r\n  }\r\n  return currentMin;\r\n}\r\n\r\nexport function spliceArray<T>(dest: T[], offset: number, data: T[]) {\r\n  for (let i = 0; i < data.length; i++) {\r\n    dest[offset + i] = data[i];\r\n  }\r\n}\r\n\r\nexport interface Point {\r\n  x: number,\r\n  y: number,\r\n  z: number\r\n}\r\n\r\nexport function clone(p: Point): Point {\r\n  return {x: p.x, y: p.y, z: p.z};\r\n}\r\n\r\nexport function xyNormal(p: Point): Point {\r\n  return {x: p.y, y: -p.x, z: p.z};\r\n}\r\n\r\nexport function sum(p1: Point, p2: Point): Point {\r\n  return {x: p1.x + p2.x, y: p1.y + p2.y, z: p1.z + p2.z};\r\n}\r\n\r\nexport function sub(p1: Point, p2: Point): Point {\r\n  return sum(p1, scale(p2, -1));\r\n}\r\n\r\nexport function mult(p1: Point, p2: Point): Point {\r\n  return {x: p1.x * p2.x, y: p1.y * p2.y, z: p1.z * p2.z};\r\n}\r\n\r\nexport function dot(p1: Point, p2: Point): number {\r\n  return p1.x * p2.x + p1.y * p2.y + p1.z * p2.z;\r\n}\r\n\r\nexport function scale(p: Point, s: number): Point {\r\n  return {x: p.x * s, y: p.y * s, z: p.z * s};\r\n}\r\n\r\nexport function shrink(p: Point, s: number): Point {\r\n  return scale(p, 1/s);\r\n}\r\n\r\nexport function length(p: Point): number {\r\n  return Math.sqrt(dot(p, p));\r\n}\r\n\r\nexport function xyAngle(p: Point): number {\r\n  return Math.atan2(p.y, p.x);\r\n}\r\n\r\nexport function flatten(p: Point): Point {\r\n  return {x: p.x, y: p.y, z: 0};\r\n}\r\n\r\nexport function average(ps: Point[]): Point {\r\n  let returnPoint = {x: 0, y: 0, z: 0};\r\n  if (ps.length > 0) {\r\n    for (let p of ps) {\r\n      returnPoint = sum(returnPoint, p);\r\n    }\r\n    return shrink(returnPoint, ps.length);\r\n  } else {\r\n    return returnPoint;\r\n  }\r\n}\r\n\r\nexport let distance = length;\r\n\r\nexport function normalize(p: Point): Point {\r\n  let len = length(p);\r\n  if (len != 0) {\r\n    return shrink(p, len);\r\n  } else {\r\n    return p;\r\n  }\r\n}\r\n\r\nexport function unit(p: Point): Point {\r\n  return shrink(p, length(p));\r\n}\r\n\r\nexport function transform(p: Point, position: Point, rotation: number = 0, s: number = 1) {\r\n  position = clone(position);\r\n  let rel = scale(sub(p, position), s);\r\n  position.x += rel.x * Math.cos(rotation) - rel.y * Math.sin(rotation);\r\n  position.y += rel.x * Math.sin(rotation) + rel.y * Math.cos(rotation);\r\n  return position;\r\n}\r\n\r\nexport type Polygon = Point[];\r\n\r\nexport function polyFromCircle(x: number, y: number, z: number, r: number, points: number = 20) {\r\n  let retList: Polygon = [];\r\n  for (let i = 0; i < points; i++) {\r\n    let theta = i * 2 * Math.PI / points;\r\n    retList.push({x: x + r * Math.cos(theta), y: y + r * Math.sin(theta), z: z});\r\n  }\r\n  return retList;\r\n}\r\n\r\nexport function polyFromRect(x: number, y: number, z: number, width: number, height: number, pointMode: \"topLeft\" | \"center\" | \"twoPoint\" = \"topLeft\"): Polygon {\r\n  switch (pointMode) {\r\n  case \"topLeft\":\r\n    return [\r\n      {x: x, y: y, z: z},\r\n      {x: x + width, y: y, z: z},\r\n      {x: x + width, y: y + height, z: z},\r\n      {x: x, y: y + height, z: z}\r\n    ];\r\n  case \"center\":\r\n    let halfW = width / 2;\r\n    let halfH = height / 2;\r\n    return [\r\n      {x: x - halfW, y: y - halfH, z: z},\r\n      {x: x + halfW, y: y - halfH, z: z},\r\n      {x: x + halfW, y: y + halfH, z: z},\r\n      {x: x - halfW, y: y + halfH, z: z}\r\n    ];\r\n  case \"twoPoint\":\r\n    return [\r\n      {x: x, y: y, z: z},\r\n      {x: width, y: y, z: z},\r\n      {x: width, y: height, z: z},\r\n      {x: x, y: height, z: z}\r\n    ];\r\n  }\r\n}\r\n\r\nexport function transformPoly(poly: Polygon, position: Point, rotation: number = 0, scale: number = 1) {\r\n  let retPoly: Polygon = [];\r\n  for (let point of poly) {\r\n    retPoly.push(transform(point, position, rotation, scale));\r\n  }\r\n  return retPoly;\r\n}\r\n\r\nexport function castOnSegment(rp: Point, rd: Point, s1: Point, s2: Point): Point | undefined {\r\n  let sp = s1;\r\n  let sd = sub(s2, s1);\r\n  let sLen = length(sd);\r\n  let st = (rd.x * (sp.y - rp.y) + rd.y * (rp.x - sp.x))/(rd.y * sd.x - rd.x * sd.y);\r\n  let rt = (sp.y + sd.x * st - rp.x) / rd.x;\r\n  if (st < sLen && rt > 0) {\r\n    return sum(rp, scale(rd, rt));\r\n  }\r\n}\r\n\r\nexport function castOnPolygon(rp: Point, rd: Point, poly: Polygon): Point | undefined {\r\n  let closest;\r\n  let closestDist;\r\n  let pPrevious = poly[poly.length - 1];\r\n  for (let p of poly) {\r\n    let i = castOnSegment(rp, rd, pPrevious, p);\r\n    let newDist = length(sub(i, rp));\r\n    if (!closestDist || newDist < closestDist) {\r\n      closest = i;\r\n      closestDist = newDist;\r\n    }\r\n    pPrevious = p;\r\n  }\r\n  return closest;\r\n}\r\n"]}