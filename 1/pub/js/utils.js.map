{"version":3,"sources":["utils.ts"],"names":[],"mappings":";;;IAAA,qBAA4B,EAAY;QACtC,IAAI,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;QACD,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;;IAED,qBAA+B,IAAS,EAAE,MAAc,EAAE,IAAS;QACjE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;;IAWD,2BAAkC,MAAc;QAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,EAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QACtC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;IACH,CAAC;;IAED,kBAAyB,MAAc;QACrC,IAAI,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC9F,CAAC;;IAED,aAAoB,OAAe,EAAE,OAAe;QAClD,IAAI,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,EAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC;IAC1C,CAAC;;IAED,aAAoB,OAAe,EAAE,OAAe;QAClD,IAAI,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,EAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC;IAC1C,CAAC;;IAED,cAAqB,MAAc,EAAE,CAAS;QAC5C,IAAI,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,CAAC,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,CAAC;IAClC,CAAC;;IAED,aAAoB,MAAc,EAAE,CAAS;QAC3C,IAAI,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,CAAC,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,CAAC;IAClC,CAAC;;;;;QACD,CAAC","file":"utils.js","sourcesContent":["export function absoluteMin(xs: number[]) {\r\n  let currentMin = xs[0];\r\n  for (let i = 1; i < xs.length; i ++) {\r\n    if (Math.abs(currentMin) > Math.abs(xs[i])) {\r\n      currentMin = xs[i];\r\n    }\r\n  }\r\n  return currentMin;\r\n}\r\n\r\nexport function spliceArray<T>(dest: T[], offset: number, data: T[]) {\r\n  for (let i = 0; i < data.length; i++) {\r\n    dest[offset + i] = data[i];\r\n  }\r\n}\r\n\r\ninterface CoordObject {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ntype CoordArray = number[];\r\n\r\ntype Coords = CoordObject|CoordArray;\r\n\r\nexport function standardizeCoords(coords: Coords) {\r\n  if (Array.isArray(coords)) {\r\n    return {x: coords[0], y: coords[0]};\r\n  } else {\r\n    return coords;\r\n  }\r\n}\r\n\r\nexport function distance(coords: Coords) {\r\n  let standardCoords = standardizeCoords(coords);\r\n  return Math.sqrt(standardCoords.x * standardCoords.x + standardCoords.y * standardCoords.y);\r\n}\r\n\r\nexport function sub(coords1: Coords, coords2: Coords) {\r\n  let c1 = standardizeCoords(coords1);\r\n  let c2 = standardizeCoords(coords2);\r\n  return {x: c1.x - c2.x, y: c1.y - c2.y};\r\n}\r\n\r\nexport function add(coords1: Coords, coords2: Coords) {\r\n  let c1 = standardizeCoords(coords1);\r\n  let c2 = standardizeCoords(coords2);\r\n  return {x: c1.x + c2.x, y: c1.y + c2.y};\r\n}\r\n\r\nexport function mult(coords: Coords, s: number) {\r\n  let c = standardizeCoords(coords);\r\n  return {x: c.x * s, y: c.y * s};\r\n}\r\n\r\nexport function div(coords: Coords, s: number) {\r\n  let c = standardizeCoords(coords);\r\n  return {x: c.x / s, y: c.y / s};\r\n}\r\n"]}