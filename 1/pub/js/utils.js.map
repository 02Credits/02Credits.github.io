{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["export function absoluteMin(xs: number[]) {\r\n  let currentMin = xs[0];\r\n  for (let i = 1; i < xs.length; i ++) {\r\n    if (Math.abs(currentMin) > Math.abs(xs[i])) {\r\n      currentMin = xs[i];\r\n    }\r\n  }\r\n  return currentMin;\r\n}\r\n\r\nexport function spliceArray<T>(dest: T[], offset: number, data: T[]) {\r\n  for (let i = 0; i < data.length; i++) {\r\n    dest[offset + i] = data[i];\r\n  }\r\n}\r\n\r\nexport interface Dimensions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface Point {\r\n  x: number,\r\n  y: number,\r\n  z?: number\r\n}\r\nexport type VecArray = number[];\r\nexport type Vec = VecArray | Dimensions | Point;\r\nfunction isPoint(object: Vec): object is Point { return \"x\" in object; }\r\nfunction isDimensions(object: Vec): object is Dimensions { return \"width\" in object; }\r\n\r\nexport function toVecArray(vec: Vec) {\r\n  if (isPoint(vec)) {\r\n    return [vec.x, vec.y, vec.z || 0];\r\n  } else if (isDimensions(vec)) {\r\n    return [vec.width, vec.height];\r\n  } else {\r\n    return vec;\r\n  }\r\n}\r\n\r\nexport function toPoint(vec: Vec) {\r\n  if (isPoint(vec)) {\r\n    return vec;\r\n  } else {\r\n    vec = toVecArray(vec);\r\n    let returnVec = {x: vec[0], y: vec[1]} as Point;\r\n    if (vec.length >= 2) {\r\n      returnVec.z = vec[2];\r\n    }\r\n    return returnVec;\r\n  }\r\n}\r\n\r\nexport function toDimensions(vec: Vec) {\r\n  if (isDimensions(vec)) {\r\n    return vec;\r\n  } else {\r\n    vec = toVecArray(vec);\r\n    return {width: vec[0], height: vec[1]};\r\n  }\r\n}\r\n\r\nexport function clone<T extends Vec>(vec: T): T {\r\n  if (isDimensions(vec)) {\r\n    return {width: vec.width, height: vec.height} as T;\r\n  } else if (isPoint(vec)) {\r\n    let returnVec: Point = {x: vec.x, y: vec.y};\r\n    if (\"z\" in vec) {\r\n      returnVec.z = vec.z;\r\n    }\r\n    return returnVec as T;\r\n  } else {\r\n    let vecArray = vec as number[];\r\n    let returnArray = new Array(vecArray.length);\r\n    for (let i = 0; i < returnArray.length; i++) {\r\n      returnArray[i] = vecArray[i];\r\n    }\r\n    return returnArray as T;\r\n  }\r\n}\r\n\r\nexport function normal(vec: Vec): VecArray {\r\n  vec = toVecArray(vec);\r\n  return [vec[1], -vec[0]];\r\n}\r\n\r\nexport function sum(vec1: Vec, vec2: Vec): VecArray {\r\n  vec1 = toVecArray(vec1);\r\n  vec2 = toVecArray(vec2);\r\n  let max = clone(vec1.length > vec2.length ? vec1 : vec2);\r\n  let min = vec1 === max ? vec2 : vec1;\r\n  for (let i = 0; i < min.length; i++) {\r\n    max[i] += min[i];\r\n  }\r\n  return [vec1[0] + vec2[0], vec1[1] + vec2[1]];\r\n}\r\n\r\nexport function sub(vec1: Vec, vec2: Vec): VecArray {\r\n  return sum(vec1, scale(vec2, -1));\r\n}\r\n\r\nexport function mult(vec1: Vec, vec2: Vec): VecArray {\r\n  vec1 = toVecArray(vec1);\r\n  vec2 = toVecArray(vec2);\r\n  let max = clone(vec1.length > vec2.length ? vec1 : vec2);\r\n  let min = vec1 === max ? vec2 : vec1;\r\n  for (let i = 0; i < min.length; i++) {\r\n    max[i] *= min[i];\r\n  }\r\n  return max;\r\n}\r\n\r\nexport function dot(vec1: Vec, vec2: Vec): number {\r\n  vec1 = toVecArray(vec1);\r\n  vec2 = toVecArray(vec2);\r\n  let max = vec1.length > vec2.length ? vec1 : vec2;\r\n  let min = vec1 === max ? vec2 : vec1;\r\n  let sum = 0;\r\n  for (let i = 0; i < min.length; i++) {\r\n    sum += vec1[i] * vec2[i];\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function scale(vec: Vec, scale: number): VecArray {\r\n  vec = clone(toVecArray(vec));\r\n  for (let i = 0; i < vec.length; i++) {\r\n    vec[i] *= scale;\r\n  }\r\n  return vec;\r\n}\r\n\r\nexport function shrink(vec: Vec, s: number): VecArray {\r\n  return scale(vec, 1/s);\r\n}\r\n\r\nexport function length(vec: Vec): number {\r\n  vec = toVecArray(vec);\r\n  let sum = 0;\r\n  for (let el of vec) {\r\n    sum += el * el;\r\n  }\r\n  return Math.sqrt(sum);\r\n}\r\n\r\nexport function angle(vec: Vec): number {\r\n  vec = toVecArray(vec);\r\n  return Math.atan2(vec[1], vec[0]);\r\n}\r\n\r\nexport let distance = length;\r\n\r\nexport function unit(vec: Vec): VecArray {\r\n  vec = toVecArray(vec);\r\n  let len = length(vec);\r\n  return shrink(vec, len);\r\n}\r\n\r\nexport function transform(vec: Vec, position: Vec, rotation: number = 0, scale: number = 1) {\r\n  vec = toVecArray(vec);\r\n  position = toVecArray(position);\r\n  let relX = (vec[0] - position[0]) * scale;\r\n  let relY = (vec[1] - position[1]) * scale;\r\n  return [\r\n    position[0] + relX * Math.cos(rotation) - relY * Math.sin(rotation),\r\n    position[1] + relX * Math.sin(rotation) + relY * Math.cos(rotation)\r\n  ];\r\n}\r\n\r\nexport type Polygon = Vec[];\r\n\r\nexport function polyFromCircle(x: number, y: number, r: number, points: number = 20) {\r\n  let retList: Polygon = [];\r\n  for (let i = 0; i < points; i++) {\r\n    let theta = i * 2 * Math.PI / points;\r\n    retList.push([x + r * Math.cos(theta), y + r * Math.sin(theta)]);\r\n  }\r\n  return retList;\r\n}\r\n\r\nexport function polyFromRect(x: number, y: number, width: number, height: number, pointMode: \"topLeft\" | \"center\" | \"twoPoint\" = \"topLeft\"): Polygon {\r\n  switch (pointMode) {\r\n  case \"topLeft\":\r\n    return [\r\n      [x, y],\r\n      [x + width, y],\r\n      [x + width, y + height],\r\n      [x, y + height]\r\n    ];\r\n  case \"center\":\r\n    let halfW = width / 2;\r\n    let halfH = height / 2;\r\n    return [\r\n      [x - halfW, y - halfH],\r\n      [x + halfW, y - halfH],\r\n      [x + halfW, y + halfH],\r\n      [x - halfW, y + halfH]\r\n    ];\r\n  case \"twoPoint\":\r\n    return [\r\n      [x, y],\r\n      [width, y],\r\n      [width, height],\r\n      [x, height]\r\n    ];\r\n  }\r\n}\r\n\r\nexport function transformPoly(poly: Polygon, position: Vec, rotation: number = 0, scale: number = 1) {\r\n  let retPoly: Polygon = [];\r\n  for (let point of poly) {\r\n    retPoly.push(transform(point, position, rotation, scale));\r\n  }\r\n  return retPoly;\r\n}\r\n\r\nexport function castOnSegment(rp: Vec, rd: Vec, s1: Vec, s2: Vec): Vec | undefined {\r\n  rp = toVecArray(rp);\r\n  rd = toVecArray(rd);\r\n  s1 = toVecArray(s1);\r\n  s2 = toVecArray(s2);\r\n  let sp = s1;\r\n  let sd = sub(s2, s1);\r\n  let sLen = length(sd);\r\n  let st = (rd[0] * (sp[1] - rp[1]) + rd[1] * (rp[0] - sp[0]))/(rd[1] * sd[0] - rd[0] * sd[1]);\r\n  let rt = (sp[0] + sd[0] * st - rp[0]) / rd[0];\r\n  if (st < sLen && rt > 0) {\r\n    return sum(rp, scale(rd, rt));\r\n  }\r\n}\r\n\r\nexport function castOnPolygon(rp: Vec, rd: Vec, poly: Polygon): Vec | undefined {\r\n  let closest;\r\n  let closestDist;\r\n  let pPrevious = poly[poly.length - 1];\r\n  for (let p of poly) {\r\n    let i = castOnSegment(rp, rd, pPrevious, p);\r\n    let newDist = length(sub(i, rp));\r\n    if (!closestDist || newDist < closestDist) {\r\n      closest = i;\r\n      closestDist = newDist;\r\n    }\r\n    pPrevious = p;\r\n  }\r\n  return closest;\r\n}\r\n"]}