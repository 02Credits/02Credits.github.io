{"version":3,"sources":["statueManager.ts"],"names":[],"mappings":"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","file":"statueManager.js","sourcesContent":["import * as ces from \"./ces\";\r\nimport utils from \"./utils\";\r\nimport {Update} from \"./animationManager\";\r\nimport {RenderInfo, Position, Dimensions, Entity as RenderedEntity} from \"./pixiManager\";\r\nimport {isPlayer} from \"./playerManager\";\r\nimport {Collision} from \"./collisionManager\";\r\n\r\nimport {CombinedEntity} from \"./entity\";\r\n\r\nexport interface StatueComponent {\r\n    // Current Jump progress\r\n    jumpState?: {\r\n        jumpTime: number;\r\n        jumping: boolean;\r\n        direction: {x: number, y: number};\r\n        jumpDistance: number;\r\n    }\r\n    lastJumped?: number;\r\n    // Light activated\r\n    active?: boolean;\r\n    // Home Position\r\n    home?: {x: number, y: number};\r\n    // Appearance\r\n    activeTexture?: string;\r\n    inactiveTexture?: string;\r\n    // Jump triggering\r\n    activationRadius: number;\r\n    timeBetweenJumps: number;\r\n    // Jump Characteristics\r\n    maxJumpDistance: number;\r\n    jumpTimeLength: number;\r\n    jumpScaling: number;\r\n    originalScale?: number;\r\n    // Player Knockback\r\n    knockBack: number;\r\n    // Rotation Mechanics\r\n    rotationSpeed: number;\r\n    rotationSlowdown: number; // fraction to slow down by\r\n}\r\n\r\nexport interface Entity extends RenderedEntity {\r\n    statue: StatueComponent;\r\n}\r\nexport function isStatue(entity: CombinedEntity): entity is Entity { return \"statue\" in entity; }\r\n\r\nexport function Setup() {\r\n    ces.EntityAdded.Subscribe((entity) => {\r\n        if (isStatue(entity)) {\r\n            let statue = entity.statue;\r\n            statue.jumpState = {jumpTime: 0, jumping: false, direction: {x:0, y:0}, jumpDistance: 0};\r\n            statue.active = false;\r\n            statue.home = utils.defaultValue(() => statue.home, {x: entity.position.x, y: entity.position.y});\r\n            statue.activeTexture = utils.defaultValue(() => statue.activeTexture, entity.rendered.texture);\r\n            statue.inactiveTexture = utils.defaultValue(() => statue.inactiveTexture, entity.rendered.texture);\r\n            statue.originalScale = utils.defaultValue(() => statue.originalScale, 1);\r\n            statue.lastJumped = 0;\r\n            entity.position = utils.defaultValue(() => entity.position, {x: 0, y: 0, rotation: 0});\r\n            entity.position.rotation = utils.defaultValue(() => entity.position.rotation, 0);\r\n        }\r\n    });\r\n\r\n    Collision.Subscribe((collider, collidee, details) => {\r\n        if (isPlayer(collider) && isStatue(collidee)) {\r\n            collider.player.vx -= details.normal[0] * 2;\r\n            collider.player.vy -= details.normal[1] * 2;\r\n        }\r\n    });\r\n\r\n    Update.Subscribe((time) => {\r\n        for (let entity of ces.GetEntities(isStatue)) {\r\n            let statue = entity.statue;\r\n            if (statue.jumpState.jumping) {\r\n                let state = statue.jumpState;\r\n                if (state.jumpTime > statue.jumpTimeLength) {     // Jump Finished\r\n                    state.jumping = false;\r\n                    statue.lastJumped = time;\r\n                    entity.rendered.scale = statue.originalScale;\r\n                } else {    // Jump in progress\r\n                    state.jumpTime += 0.01667;\r\n                    let jumpPosition = state.jumpTime / statue.jumpTimeLength; // calculate what part of the jump we are in.\r\n                    // Effectively we are integrating the sin function. Since we want each jump to go the distance in the\r\n                    // Statue component settings, and the integral of sin(x)dx from 0 to pi is 2. We need to divide the value\r\n                    // we multiply with the direction by 2 so that we go the proper distance\r\n                    let jumpAmount = Math.sin(jumpPosition * Math.PI) / 2;\r\n                    let distanceScaling = state.jumpDistance / statue.maxJumpDistance;\r\n                    entity.position.x += jumpAmount * state.direction.x * distanceScaling;\r\n                    entity.position.y += jumpAmount * state.direction.y * distanceScaling;\r\n                    entity.rendered.scale = statue.originalScale + statue.jumpScaling * jumpAmount;\r\n                }\r\n            } else {\r\n                let playerEntities = ces.GetEntities(isPlayer);\r\n                let target = statue.home;\r\n                let homeDelta = utils.sub(target, entity.position);\r\n                let homeDistance = utils.distance(homeDelta);\r\n                // Dunno why I did this... There should only ever be one player. Oh well\r\n                let closestPlayerPosition;\r\n                let closestDistance = Number.MAX_VALUE;\r\n                for (let player of playerEntities) {\r\n                    let playerDelta = utils.sub(player.position, entity.position);\r\n                    let playerDistance = utils.distance(playerDelta);\r\n                    if (playerDistance < statue.activationRadius) {\r\n                        if (closestDistance > playerDistance) {\r\n                            closestPlayerPosition = player.position;\r\n                            closestDistance = playerDistance;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let distance = homeDistance;\r\n                if (closestDistance != Number.MAX_VALUE) {\r\n                    target = closestPlayerPosition;\r\n                    distance = closestDistance;\r\n                }\r\n                if (distance > 0.01) {\r\n                    let targetDelta = utils.sub(target, entity.position);\r\n                    targetDelta = utils.div(targetDelta, distance);\r\n                    let targetRotation = Math.atan2(targetDelta.y, targetDelta.x);\r\n                    let r = entity.position.rotation;\r\n                    let dr = utils.absoluteMin([targetRotation - r, (targetRotation + (2 * Math.PI)) - r, (targetRotation - (2 * Math.PI)) - r]);\r\n                    if (time - statue.lastJumped > statue.timeBetweenJumps && Math.abs(dr) < 0.01) {\r\n                        statue.jumpState = {\r\n                            jumpTime: 0,\r\n                            jumping: true,\r\n                            direction: targetDelta,\r\n                            jumpDistance: Math.min(distance, statue.maxJumpDistance)\r\n                        };\r\n                    } else {\r\n                        if (Math.abs(dr) > statue.rotationSpeed) {\r\n                            entity.position.rotation += dr * statue.rotationSpeed / Math.abs(dr);\r\n                        } else {\r\n                            entity.position.rotation += dr * statue.rotationSlowdown;\r\n                        }\r\n                    }\r\n                } else {\r\n                    statue.lastJumped = time;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n"]}