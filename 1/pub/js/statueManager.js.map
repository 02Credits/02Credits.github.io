{"version":3,"sources":["statueManager.ts"],"names":[],"mappings":"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","file":"statueManager.js","sourcesContent":["import * as ces from \"./ces\";\r\nimport * as utils from \"./utils\";\r\nimport {Update} from \"./animationManager\";\r\nimport {Entity as RenderedEntity} from \"./webglManager\";\r\nimport {isPlayer} from \"./playerManager\";\r\nimport {Collision} from \"./collisionManager\";\r\n\r\nimport {CombinedEntity} from \"./entity\";\r\n\r\nexport interface StatueComponent {\r\n  // Current Jump progress\r\n  jumpState?: {\r\n    jumpTime: number;\r\n    jumping: boolean;\r\n    direction: {x: number, y: number};\r\n    jumpDistance: number;\r\n  }\r\n  lastJumped?: number;\r\n  // Light activated\r\n  active?: boolean;\r\n  // Home Position\r\n  home?: {x: number, y: number};\r\n  // Appearance\r\n  activeTexture?: string;\r\n  inactiveTexture?: string;\r\n  // Jump triggering\r\n  activationRadius: number;\r\n  timeBetweenJumps: number;\r\n  // Jump Characteristics\r\n  maxJumpDistance: number;\r\n  jumpTimeLength: number;\r\n  jumpScaling: number;\r\n  originalScale?: number;\r\n  // Player Knockback\r\n  knockBack: number;\r\n  // Rotation Mechanics\r\n  rotationSpeed: number;\r\n  rotationSlowdown: number; // fraction to slow down by\r\n}\r\n\r\nexport interface Entity extends RenderedEntity {\r\n  statue: StatueComponent;\r\n}\r\nexport function isStatue(entity: CombinedEntity): entity is Entity { return \"statue\" in entity; }\r\n\r\nconst obj: any = {};\r\nexport function setup() {\r\n  ces.EntityAdded.Subscribe((entity) => {\r\n    if (isStatue(entity)) {\r\n      let statue = entity.statue;\r\n      statue.jumpState = {jumpTime: 0, jumping: false, direction: {x:0, y:0}, jumpDistance: 0};\r\n      statue.active = false;\r\n      statue.home = (statue || obj).home || {x: entity.position.x, y: entity.position.y};\r\n      statue.activeTexture = (statue || obj).activeTexture || entity.texture;\r\n      statue.inactiveTexture = (statue || obj).inactiveTexture || entity.texture;\r\n      statue.originalScale = entity.scale || 1;\r\n      statue.lastJumped = 0;\r\n      entity.position = (entity.position || obj) || {x: 0, y: 0, rotation: 0};\r\n      entity.rotation = ((entity || obj).position || obj).rotation || 0;\r\n    }\r\n  });\r\n\r\n  Collision.Subscribe((collider, collidee, details) => {\r\n    if (isPlayer(collider) && isStatue(collidee)) {\r\n      collider.player.velocity = utils.toPoint(utils.sub(collider.player.velocity, utils.scale(details.normal, 2)));\r\n    }\r\n  });\r\n\r\n  Update.Subscribe((time) => {\r\n    for (let entity of ces.getEntities(isStatue)) {\r\n      let statue = entity.statue;\r\n      if (statue.jumpState.jumping) {\r\n        let state = statue.jumpState;\r\n        if (state.jumpTime > statue.jumpTimeLength) {     // Jump Finished\r\n          state.jumping = false;\r\n          statue.lastJumped = time;\r\n          entity.scale = statue.originalScale;\r\n        } else {    // Jump in progress\r\n          state.jumpTime += 0.01667;\r\n          let jumpPosition = state.jumpTime / statue.jumpTimeLength; // calculate what part of the jump we are in.\r\n          // Effectively we are integrating the sin function. Since we want each jump to go the distance in the\r\n          // Statue component settings, and the integral of sin(x)dx from 0 to pi is 2. We need to divide the value\r\n          // we multiply with the direction by 2 so that we go the proper distance\r\n          let jumpAmount = Math.sin(jumpPosition * Math.PI) / 2;\r\n          let distanceScaling = state.jumpDistance / statue.maxJumpDistance;\r\n          entity.position = utils.toPoint(utils.sum(entity.position, utils.scale(state.direction, jumpAmount * distanceScaling)));\r\n          entity.scale = statue.originalScale + statue.jumpScaling * jumpAmount;\r\n        }\r\n      } else {\r\n        let playerEntities = ces.getEntities(isPlayer);\r\n        let target = statue.home;\r\n        let homeDelta = utils.sub(target, entity.position);\r\n        let homeDistance = utils.distance(homeDelta);\r\n        // Dunno why I did this... There should only ever be one player. Oh well\r\n        let closestPlayerPosition;\r\n        let closestDistance = Number.MAX_VALUE;\r\n        for (let player of playerEntities) {\r\n          let playerDelta = utils.sub(player.position, entity.position);\r\n          let playerDistance = utils.distance(playerDelta);\r\n          if (playerDistance < statue.activationRadius) {\r\n            if (closestDistance > playerDistance) {\r\n              closestPlayerPosition = player.position;\r\n              closestDistance = playerDistance;\r\n            }\r\n          }\r\n        }\r\n\r\n        let distance = homeDistance;\r\n        if (closestDistance != Number.MAX_VALUE) {\r\n          target = closestPlayerPosition;\r\n          distance = closestDistance;\r\n        }\r\n        if (distance > 0.01) {\r\n          let targetDelta = utils.sub(target, entity.position);\r\n          targetDelta = utils.shrink(targetDelta, distance);\r\n          let targetRotation = utils.angle(targetDelta);\r\n          let r = entity.rotation;\r\n          let dr = utils.absoluteMin([targetRotation - r, (targetRotation + (2 * Math.PI)) - r, (targetRotation - (2 * Math.PI)) - r]);\r\n          if (time - statue.lastJumped > statue.timeBetweenJumps && Math.abs(dr) < 0.01) {\r\n            statue.jumpState = {\r\n              jumpTime: 0,\r\n              jumping: true,\r\n              direction: utils.toPoint(targetDelta),\r\n              jumpDistance: Math.min(distance, statue.maxJumpDistance)\r\n            };\r\n          } else {\r\n            if (Math.abs(dr) > statue.rotationSpeed) {\r\n              entity.rotation += dr * statue.rotationSpeed / Math.abs(dr);\r\n              entity.rotation = entity.rotation % (Math.PI * 2);\r\n            } else {\r\n              entity.rotation += dr * statue.rotationSlowdown;\r\n            }\r\n          }\r\n        } else {\r\n          statue.lastJumped = time;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n"]}