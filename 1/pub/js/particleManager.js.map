{"version":3,"sources":["particleManager.ts"],"names":[],"mappings":";;;IAiBA,qBAA4B,MAAsB,IAAsB,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,CAAC,CAAC;;IAI/G,sBAAsB,MAAW,EAAE,MAAW;QAC5C,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;gBACjB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,IAAI,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;oBAC1E,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED;QACE,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM;YAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,SAAS,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBACzC,SAAS,CAAC,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;gBAC1C,IAAI,KAAK,GAAQ,EAAE,CAAC;gBACpB,qCAAc,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBAC/C,SAAS,CAAC,IAAI,GAAG,IAAI,oBAAU,mBAAK,SAAS,CAAC,QAAQ,EAAK,KAAK,IAAE,YAAY,EAAE;wBAC9E,KAAK,EAAE,KAAK;wBACZ,GAAG,EAAE,KAAK;wBACV,MAAM,EAAE,SAAS,CAAC,MAAM;wBACxB,IAAI,EAAE,IAAI;wBACV,KAAK,EAAE;4BACL,cAAc,EAAE,EAAE;4BAClB,YAAY,EAAE,EAAE;4BAChB,WAAW,EAAE,GAAG;4BAChB,OAAO,EAAE,KAAK;4BACd,WAAW,EAAE,KAAK;yBACnB;qBACF,IAAE,CAAC;YACN,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,MAAM;YACjC,IAAI,iBAAiB,GAAG,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACrD,GAAG,CAAC,CAAC,IAAI,eAAe,IAAI,iBAAiB,CAAC,CAAC,CAAC;gBAC9C,IAAI,SAAS,GAAG,eAAe,CAAC,iBAAiB,CAAC;gBAClD,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,yBAAM,CAAC,SAAS,CAAC,CAAC,IAAI;YACpB,IAAI,iBAAiB,GAAG,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACrD,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,iBAAiB,CAAC,CAAC,CAAC;gBACrC,IAAI,SAAS,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,GAAG,SAAS,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC;wBACxD,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;wBACpC,qCAAc,CAAC,SAAS,CAAC,aAAa,EAAE,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBACrE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBAClD,qCAAc,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBACjE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBAChD,oBAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;wBACvD,IAAI,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBAC1C,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;oBAC5C,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;;;;;;;;;;;;;;;;;;;QAED,CAAC","file":"particleManager.js","sourcesContent":["import {CombinedEntity} from \"./entity\";\r\nimport {Update} from \"./animationManager\";\r\nimport * as ces from \"./ces\";\r\nimport {collapseTarget} from \"./interpolationManager\";\r\nimport ObjectPool from \"./objectPool\";\r\n\r\nexport interface Entity {\r\n  particleGenerator: {\r\n    relativeStart: any;\r\n    relativeEnd: any;\r\n    constant: any;\r\n    length: number;\r\n    frequency: number;\r\n    particleIds?: Set<string>;\r\n    pool?: ObjectPool;\r\n  }\r\n}\r\nexport function isGenerator(entity: CombinedEntity): entity is Entity { return \"particleGenerator\" in entity; }\r\n\r\n\r\n\r\nfunction makeRelative(entity: any, target: any) {\r\n  for (let id in target) {\r\n    if (id in entity) {\r\n      if (!isNaN(target[id]) || !isNaN(entity[id])) {\r\n        target[id] += entity[id];\r\n      } else if (typeof entity[id] == \"object\" && typeof target[id] == \"object\") {\r\n        makeRelative(entity[id], target[id]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function Setup() {\r\n  ces.CheckEntity.Subscribe((entity) => {\r\n    if (isGenerator(entity)) {\r\n      let generator = entity.particleGenerator;\r\n      generator.particleIds = new Set<string>();\r\n      let start: any = {};\r\n      collapseTarget(generator.relativeStart, start);\r\n      generator.pool = new ObjectPool({...generator.constant, ...start, interpolated: {\r\n        start: start,\r\n        end: start,\r\n        length: generator.length,\r\n        kill: true,\r\n        state: {\r\n          collapsedStart: {},\r\n          collapsedEnd: {},\r\n          timeStarted: NaN,\r\n          reverse: false,\r\n          initialized: false\r\n        }\r\n      }});\r\n    }\r\n    return true;\r\n  });\r\n\r\n  ces.EntityRemoved.Subscribe((entity) => {\r\n    let generatorEntities = ces.GetEntities(isGenerator);\r\n    for (let generatorEntity of generatorEntities) {\r\n      let generator = generatorEntity.particleGenerator;\r\n      if (generator.particleIds.has(entity.id)) {\r\n        generator.pool.Free(entity);\r\n      }\r\n    }\r\n  })\r\n\r\n  Update.Subscribe((time) => {\r\n    let generatorEntities = ces.GetEntities(isGenerator);\r\n    for (let entity of generatorEntities) {\r\n      let generator = entity.particleGenerator;\r\n      for (let i = 0; i < 100; i++) {\r\n        if (Math.random() < 0.01666 * generator.frequency / 100) {\r\n          let particle = generator.pool.New();\r\n          collapseTarget(generator.relativeStart, particle.interpolated.start);\r\n          makeRelative(entity, particle.interpolated.start);\r\n          collapseTarget(generator.relativeEnd, particle.interpolated.end);\r\n          makeRelative(entity, particle.interpolated.end);\r\n          ObjectPool.copy(particle.interpolated.start, particle);\r\n          let addedEntity = ces.AddEntity(particle);\r\n          generator.particleIds.add(addedEntity.id);\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n"]}