{"version":3,"sources":["particleManager.ts"],"names":[],"mappings":";;;IAcA,qBAA4B,MAAsB,IAAsB,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,CAAC,CAAC;;IAI/G,sBAAsB,MAAW,EAAE,MAAW;QAC5C,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;gBACjB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,IAAI,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;oBAC1E,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;QACE,yBAAM,CAAC,SAAS,CAAC,CAAC,IAAI;YACpB,IAAI,iBAAiB,GAAG,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAErD,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,iBAAiB,CAAC,CAAC,CAAC;gBACrC,IAAI,SAAS,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;oBAClD,IAAI,aAAa,GAAG,YAAY,CAAC,MAAM,EAAE,qCAAc,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClF,IAAI,WAAW,qBAAO,qCAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAK,aAAa,IAAE,cAAc,EAAE;4BAC1F,KAAK,EAAE,aAAa;4BACpB,GAAG,EAAE,YAAY,CAAC,MAAM,EAAE,qCAAc,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;4BAChE,MAAM,EAAE,SAAS,CAAC,MAAM;4BACxB,IAAI,EAAE,IAAI;yBACX,GAAC,CAAC;oBACH,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oBACzB,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBAC7B,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;;;;;;;;;;;;;;;;QAED,CAAC","file":"particleManager.js","sourcesContent":["import {CombinedEntity} from \"./entity\";\r\nimport {Update} from \"./animationManager\";\r\nimport * as ces from \"./ces\";\r\nimport {collapseTarget} from \"./interpolationManager\";\r\n\r\nexport interface Entity {\r\n  particleGenerator: {\r\n    relativeStart: any;\r\n    relativeEnd: any;\r\n    constant: any;\r\n    length: number;\r\n    frequency: number;\r\n  }\r\n}\r\nexport function isGenerator(entity: CombinedEntity): entity is Entity { return \"particleGenerator\" in entity; }\r\n\r\n\r\n\r\nfunction makeRelative(entity: any, target: any) {\r\n  for (let id in target) {\r\n    if (id in entity) {\r\n      if (!isNaN(target[id]) || !isNaN(entity[id])) {\r\n        target[id] += entity[id];\r\n      } else if (typeof entity[id] == \"object\" && typeof target[id] == \"object\") {\r\n        makeRelative(entity[id], target[id]);\r\n      }\r\n    }\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function Setup() {\r\n  Update.Subscribe((time) => {\r\n    let generatorEntities = ces.GetEntities(isGenerator);\r\n\r\n    for (let entity of generatorEntities) {\r\n      let generator = entity.particleGenerator;\r\n      if (Math.random() < 0.01666 * generator.frequency) {\r\n        let relativeStart = makeRelative(entity, collapseTarget(generator.relativeStart));\r\n        let newParticle = {...collapseTarget(generator.constant), ...relativeStart, \"interpolated\": {\r\n          start: relativeStart,\r\n          end: makeRelative(entity, collapseTarget(generator.relativeEnd)),\r\n          length: generator.length,\r\n          kill: true\r\n        }};\r\n        console.log(newParticle);\r\n        ces.AddEntity(newParticle);\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n"]}