{"version":3,"sources":["wallManager.ts"],"names":[],"mappings":";;;IAiBA,gBAAuB,MAAsB,IAA0B,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;;IAKjG,kBAAyB,MAAsB,IAA4B,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,CAAC,CAAC;;IAI5G;QACE,4BAAS,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO;YAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjG,EAAE,CAAC,CAAC,wBAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,WAAW,GAAG,CAAC,CAAC;oBACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBACzB,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;oBACvC,CAAC;oBACD,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC9F,IAAI,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;oBAEzE,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjG,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;;;;;;;;;;;;;;;QACD,CAAC","file":"wallManager.js","sourcesContent":["import {CheckEntity} from \"./ces\";\r\nimport {Collision, Entity as CollidableEntity, isCollidable} from \"./collisionManager\";\r\nimport {isPlayer} from \"./playerManager\";\r\nimport {CombinedEntity} from \"./entity\";\r\nimport {isMoving, Entity as MovingEntity} from \"./motionManager\";\r\nimport * as utils from \"./utils\";\r\n\r\n// export interface PhysicalEntity extends CollidableEntity {\r\n//   physical: boolean\r\n// }\r\n// export function isPhysical(entity: CombinedEntity): entity is PhysicalEntity { return \"physical\" in entity; }\r\n\r\nexport interface WallEntity extends CollidableEntity {\r\n  wall: boolean\r\n  position: utils.Point,\r\n  dimensions: utils.Point,\r\n}\r\nexport function isWall(entity: CombinedEntity): entity is WallEntity { return \"wall\" in entity; }\r\n\r\nexport interface BouncyEntity extends MovingEntity {\r\n  restitution: number;\r\n}\r\nexport function isBouncy(entity: CombinedEntity): entity is BouncyEntity { return \"restitution\" in entity; }\r\n\r\nexport type Entity = WallEntity | BouncyEntity;\r\n\r\nexport function setup() {\r\n  Collision.Subscribe((collidable, wall, details) => {\r\n    if (isWall(wall)) {\r\n      collidable.position = utils.sub(collidable.position, utils.scale(details.normal, details.depth));\r\n      if (isMoving(collidable)) {\r\n        let restitution = 0;\r\n        if (isBouncy(collidable)) {\r\n          restitution = collidable.restitution;\r\n        }\r\n        let component = utils.dot(details.normal, collidable.velocity) / utils.length(details.normal);\r\n        let correction = utils.scale(utils.normalize(details.normal), component);\r\n\r\n        collidable.velocity = utils.sub(collidable.velocity, utils.scale(correction, restitution + 1));\r\n      }\r\n    }\r\n  });\r\n}\r\n"]}