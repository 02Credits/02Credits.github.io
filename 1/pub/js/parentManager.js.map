{"version":3,"sources":["parentManager.ts"],"names":[],"mappings":";;;IAcA,iBAAwB,MAAsB,IAAsB,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC;;IAE/F;QACI,yBAAM,CAAC,SAAS,CAAC;YACb,GAAG,CAAC,CAAC,IAAI,WAAW,IAAI,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC/C,IAAI,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC/C,EAAE,CAAC,CAAC,0BAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvB,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,CAAC;oBACnD,IAAI,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC;oBAC7C,IAAI,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC;oBAC7C,WAAW,CAAC,KAAK,CAAC,gBAAgB,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,IAAI,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;oBACxF,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAClB,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;4BAC/D,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,WAAW;4BAC/E,OAAO,CAAC;oBACZ,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAClB,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;4BAC/D,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,WAAW;4BAC/E,OAAO,CAAC;oBACZ,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,IAAI,CAAC,CAAC;oBAC/F,WAAW,CAAC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,GAAG,cAAc,CAAC;oBAC7F,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;oBACvE,WAAW,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC;oBAC3E,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;oBACvE,WAAW,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC;gBAC/E,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;;;;;;;;;;;;;;;;QACD,CAAC","file":"parentManager.js","sourcesContent":["import * as ces from \"./ces\"\r\nimport {Update} from \"./animationManager\";\r\nimport {Position, Entity as RenderableEntity, isRenderable} from \"./pixiManager\";\r\nimport utils from \"./utils\";\r\nimport {CombinedEntity} from \"./entity\";\r\n\r\nexport interface Entity extends RenderableEntity {\r\n    child: {\r\n        relativePosition?: Position,\r\n        relativeScale?: number,\r\n        relativeAlpha?: number\r\n    },\r\n    parent: string\r\n}\r\nexport function isChild(entity: CombinedEntity): entity is Entity { return \"child\" in entity; }\r\n\r\nexport function Setup() {\r\n    Update.Subscribe(() => {\r\n        for (let childEntity of ces.GetEntities(isChild)) {\r\n            let parent = ces.GetEntity(childEntity.parent);\r\n            if (isRenderable(parent)) {\r\n                let parentRotation = parent.position.rotation || 0;\r\n                let parentScale = parent.rendered.scale || 1;\r\n                let parentX = parent.position.x || 0;\r\n                let parentY = parent.position.y || 0;\r\n                let parentAlpha = parent.rendered.alpha || 1;\r\n                childEntity.child.relativePosition = childEntity.child.relativePosition || {y: 0, x: 0};\r\n                childEntity.position.x =\r\n                    (Math.cos(parentRotation) * childEntity.child.relativePosition.x -\r\n                     Math.sin(parentRotation) * childEntity.child.relativePosition.y) * parentScale +\r\n                    parentX;\r\n                childEntity.position.y =\r\n                    (Math.sin(parentRotation) * childEntity.child.relativePosition.x +\r\n                     Math.cos(parentRotation) * childEntity.child.relativePosition.y) * parentScale +\r\n                    parentY;\r\n                childEntity.child.relativePosition.rotation = childEntity.child.relativePosition.rotation || 0;\r\n                childEntity.position.rotation = childEntity.child.relativePosition.rotation + parentRotation;\r\n                childEntity.child.relativeScale = childEntity.child.relativeScale || 1;\r\n                childEntity.rendered.scale = childEntity.child.relativeScale * parentScale;\r\n                childEntity.child.relativeAlpha = childEntity.child.relativeAlpha || 1;\r\n                childEntity.rendered.alpha = childEntity.child.relativeAlpha * parentAlpha;\r\n            }\r\n        }\r\n    });\r\n}\r\n"]}