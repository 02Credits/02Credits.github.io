{"version":3,"sources":["geometryUtils.ts"],"names":[],"mappings":"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","file":"geometryUtils.js","sourcesContent":["export type Vec = number[];\r\n\r\nexport function normal(vec: Vec): Vec {\r\n  return [vec[1], -vec[0]];\r\n}\r\n\r\nexport function sum(vec1: Vec, vec2: Vec): Vec {\r\n  return [vec1[0] + vec2[0], vec1[1] + vec2[1]];\r\n}\r\n\r\nexport function sub(vec1: Vec, vec2: Vec): Vec {\r\n  return [vec1[0] - vec2[0], vec1[1] - vec2[1]];\r\n}\r\n\r\nexport function dot(vec1: Vec, vec2: Vec): number {\r\n  return vec1[0] * vec2[0] + vec1[1] * vec2[1];\r\n}\r\n\r\nexport function scale(vec: Vec, scale: number): Vec {\r\n  return [vec[0] * scale, vec[1] * scale];\r\n}\r\n\r\nexport function length(vec: Vec): number {\r\n  return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\r\n}\r\n\r\nexport function unit(vec: Vec) {\r\n  let len = length(vec);\r\n  return [\r\n    vec[0] / len,\r\n    vec[1] / len\r\n  ];\r\n}\r\n\r\nexport function transform(vec: Vec, position: Vec, rotation: number = 0, scale: number = 1) {\r\n  return [\r\n    position[0] + (vec[0] * scale - position[0]) * Math.cos(rotation) - (vec[1] * scale - position[1]) * Math.sin(rotation),\r\n    position[1] + (vec[0] * scale - position[0]) * Math.sin(rotation) - (vec[1] * scale - position[1]) * Math.cos(rotation)\r\n  ];\r\n}\r\n\r\nexport type Polygon = Vec[];\r\n\r\nexport function polyFromCircle(x: number, y: number, r: number, points: number = 20) {\r\n  let retList: Polygon = [];\r\n  for (let i = 0; i < points; i++) {\r\n    let theta = i * 2 * Math.PI / points;\r\n    retList.push([x + r * Math.cos(theta), y + r * Math.sin(theta)]);\r\n  }\r\n  return retList;\r\n}\r\n\r\nexport function polyFromRect(x: number, y: number, width: number, height: number, pointMode: \"topLeft\" | \"center\" | \"twoPoint\" = \"topLeft\"): Polygon {\r\n  switch (pointMode) {\r\n  case \"topLeft\":\r\n    return [\r\n      [x, y],\r\n      [x + width, y],\r\n      [x + width, y + height],\r\n      [x, y + height]\r\n    ];\r\n  case \"center\":\r\n    let halfW = width / 2;\r\n    let halfH = height / 2;\r\n    return [\r\n      [x - halfW, y - halfH],\r\n      [x + halfW, y - halfH],\r\n      [x + halfW, y + halfH],\r\n      [x - halfW, y + halfH]\r\n    ];\r\n  case \"twoPoint\":\r\n    return [\r\n      [x, y],\r\n      [width, y],\r\n      [width, height],\r\n      [x, height]\r\n    ];\r\n  }\r\n}\r\n\r\nexport function transformPoly(poly: Polygon, position: Vec, rotation: number = 0, scale: number = 1) {\r\n  let retPoly: Polygon = [];\r\n  for (let point of poly) {\r\n    retPoly.push(transform(point, position, rotation, scale));\r\n  }\r\n  return retPoly;\r\n}\r\n\r\nexport function castOnSegment(rp: Vec, rd: Vec, s1: Vec, s2: Vec): Vec | undefined {\r\n  let sp = s1;\r\n  let sd = sub(s2, s1);\r\n  let sLen = length(sd);\r\n  let st = (rd[0] * (sp[1] - rp[1]) + rd[1] * (rp[0] - sp[0]))/(rd[1] * sd[0] - rd[0] * sd[1]);\r\n  let rt = (sp[0] + sd[0] * st - rp[0]) / rd[0];\r\n  if (st < sLen && rt > 0) {\r\n    return sum(rp, scale(rd, rt));\r\n  }\r\n}\r\n\r\nexport function castOnPolygon(rp: Vec, rd: Vec, poly: Polygon): Vec | undefined {\r\n  let closest;\r\n  let closestDist;\r\n  let pPrevious = poly[poly.length - 1];\r\n  for (let p of poly) {\r\n    let i = castOnSegment(rp, rd, pPrevious, p);\r\n    let newDist = length(sub(i, rp));\r\n    if (!closestDist || newDist < closestDist) {\r\n      closest = i;\r\n      closestDist = newDist;\r\n    }\r\n    pPrevious = p;\r\n  }\r\n  return closest;\r\n}\r\n"]}